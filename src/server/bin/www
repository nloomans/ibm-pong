#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('ibm-pong:server');
const http = require('http');
const WebSocketServer = require('websocket').server;

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

const server = http.createServer(app);

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      process.stderr.write(`${bind} requires elevated privileges\n`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      process.stderr.write(`${bind} is already in use\n`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.listen(port);
server.on('listening', onListening);
server.on('error', onError);

const wsServer = new WebSocketServer({
  httpServer: server,
  autoAcceptConnections: false,
});

function decode(string) {
  return string.split('').map(char => char.charCodeAt(0));
}

wsServer.on('request', (request) => {
  const connection = request.accept(null, request.origin);

  console.log('Connection accepted.');

  connection.on('message', (message) => {
    if (message.type === 'utf8') {
      console.log(`Received Message: [${decode(message.utf8Data)}]`);
      connection.sendUTF(message.utf8Data);
    } else if (message.type === 'binary') {
      console.log(`Received Binary Message of ${message.binaryData.length} bytes`);
      connection.sendBytes(message.binaryData);
    }
  });

  connection.on('close', () => {
    console.log(`Peer ${connection.remoteAddress} disconnected.`);
  });
});
